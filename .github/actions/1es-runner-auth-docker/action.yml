author: AVM
name: 1ES runner pool run docker command
description: Runs docker commands on AVM docker image after authentication
inputs:
  docker-params:
    description: Docker parameters to add, other than the madatory ones required for authentication
    required: false
    default: ""
  makefile-target:
    description: The markefile target to run
    required: true
runs:
  using: composite
  steps:
    - name: init and run docker command
      shell: bash
      run: |
        set -e
        MAX_RETRIES=10
        RETRY_COUNT=0
        until [ $RETRY_COUNT -ge $MAX_RETRIES ]
        do
          az login --identity --username $MSI_ID > /dev/null && break
          RETRY_COUNT=$[$RETRY_COUNT+1]
          sleep 10
        done
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Failed to login after $MAX_RETRIES attempts."
          exit 1
        fi

        declare -A secrets
        eval "$(echo $SECRETS_CONTEXT | jq -r 'to_entries[] | @sh "secrets[\(.key|tostring)]=\(.value|tostring)"')"

        declare -A variables
        eval "$(echo $VARS_CONTEXT | jq -r 'to_entries[] | @sh "variables[\(.key|tostring)]=\(.value|tostring)"')"

        for key in "${!secrets[@]}"; do
          if [[ $key = \TF_VAR_* ]]; then
            lowerKey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            finalKey=${lowerKey/tf_var_/TF_VAR_}
            export "$finalKey"="${secrets[$key]}"
          fi
        done

        for key in "${!variables[@]}"; do
          if [[ $key = \TF_VAR_* ]]; then
            lowerKey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            finalKey=${lowerKey/tf_var_/TF_VAR_}
            export "$finalKey"="${variables[$key]}"
          fi
        done

        echo -e "Custom environment variables:\n$(env | grep TF_VAR_ | grep -v ' "TF_VAR_')"

        export ARM_SUBSCRIPTION_ID=$(az login --identity --username $MSI_ID | jq -r '.[0] | .id')
        export ARM_TENANT_ID=$(az login --identity --username $MSI_ID | jq -r '.[0] | .tenantId')
        export ARM_CLIENT_ID=$(az identity list | jq -r --arg MSI_ID "$MSI_ID" '.[] | select(.principalId == $MSI_ID) | .clientId')
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/src -w /src --network=host -e TF_IN_AUTOMATION -e TF_VAR_enable_telemetry -e MSI_ID -e ARM_SUBSCRIPTION_ID -e ARM_TENANT_ID -e ARM_CLIENT_ID -e ARM_USE_MSI=true ${{ inputs.docker-params }} mcr.microsoft.com/azterraform:latest make ${{ inputs.makefile-target }}
