author: AVM
name: Module version check
description: Checks that module version has been updated on PR
inputs:
  version-file-name:
    description: Terraform JSON file containing module version
    required: false
    default: locals.version.tf.json
  jq-query:
    description: jq query to extract module version
    required: false
    default: .locals.module_version
  github_token:
    description: GitHub token
    required: true
runs:
  using: composite
  steps:
    - name: semver regex
      shell: bash
      run: |
        echo SEMVER_REGEX="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$" >> "$GITHUB_ENV"

    - name: Get latest release version
      shell: bash
      run: |
        VER=$(curl --silent -L -H "Authorization: Bearer ${{ inputs.github_token }}" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .name | sed s/^v//)
        if [ "$VER" == "null" ]; then
          echo "No releases found"
          echo LATEST_RELEASE="0.0.0" >> "$GITHUB_ENV"
          exit 0
        fi
        if echo "$VER" | grep -P -qv "$SEMVER_REGEX"; then
          echo "Release version $VER is not a valid semantic version"
          exit 1
        fi
        echo LATEST_RELEASE="$VER" >> "$GITHUB_ENV"

    - name: Get current module version
      shell: bash
      run: |
        VER=$(jq -r '${{ inputs.jq-query }}' < ${{ inputs.version-file-name }})
        if echo "$VER" | grep -P -qv "$SEMVER_REGEX"; then
          echo "Module version $VER is not a valid semantic version"
          exit 1
        fi
        echo MODULE_VERSION="$VER" >> "$GITHUB_ENV"

    - name: Check module version is greater than latest release
      shell: bash
      run: |
        MODVERMAJOR=$(echo ${{ env.MODULE_VERSION }} | cut -d. -f1)
        MODVERMINOR=$(echo ${{ env.MODULE_VERSION }} | cut -d. -f2)
        MODVERPATCH=$(echo ${{ env.MODULE_VERSION }} | cut -d. -f3)

        RELVERMAJOR=$(echo ${{ env.LATEST_RELEASE }} | cut -d. -f1)
        RELVERMINOR=$(echo ${{ env.LATEST_RELEASE }} | cut -d. -f2)
        RELVERPATCH=$(echo ${{ env.LATEST_RELEASE }} | cut -d. -f3)

        if [ "$MODVERMAJOR" -lt "$RELVERMAJOR" ]; then
          echo "Module version ${{ env.MODULE_VERSION }} is less than latest release ${{ env.LATEST_RELEASE }}"
          exit 1
        fi

        if [ "$MODVERMAJOR" -eq "$RELVERMAJOR" ] && [ "$MODVERMINOR" -lt "$RELVERMINOR" ]; then
          echo "Module version ${{ env.MODULE_VERSION }} is less than latest release ${{ env.LATEST_RELEASE }}"
          exit 1
        fi

        if [ "$MODVERMAJOR" -eq "$RELVERMAJOR" ] && [ "$MODVERMINOR" -eq "$RELVERMINOR" ] && [ "$MODVERPATCH" -lt "$RELVERPATCH" ]; then
          echo "Module version ${{ env.MODULE_VERSION }} is less than latest release ${{ env.LATEST_RELEASE }}"
          exit 1
        fi
